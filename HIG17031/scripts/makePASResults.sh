#!/bin/bash
DIR=$1
MODE=$2
OPTMIN=${3:-0}
OPTMAX=${4:-999}

# Mode 0 = current PAS version
# Mode 1 = Next version, SigTh split
# Mode 2 = A1_5P, A1_5D absolute

mkdir -p "${DIR}"

if (( OPTMIN <= 1 && OPTMAX >= 1 )); then

  if (( MODE == 0 )); then
    # INPUT="results-phase2-proj"; OUTPUT="${DIR}/plots-phase2-proj"; for M in A1_5D A1_5P K2 L1 K2Inv K2InvWidth; do mkdir -p "${OUTPUT}/${M}"; for W in prefit_asimov; do for S in S1 S2 S2NF; do for LUMI in $(./getLumis.py ${M} ${S} "_phase2"); do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o "scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P}" --POI "${P}" --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigTh,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    INPUT="results-phase2-proj"; OUTPUT="${DIR}/plots-phase2-proj"; for M in A1_5PD; do mkdir -p "${OUTPUT}/${M}"; for W in prefit_asimov; do for S in S1 S2; do for LUMI in 3000; do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o "scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P}" --POI "${P}" --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigTh,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    # INPUT="results-proj"; OUTPUT="${DIR}/plots-run2-proj"; for M in A1_5D A1_5P K2 L1 K2Inv K2InvWidth; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S1 S2 S2NF; do for LUMI in $(./getLumis.py ${M} ${S} ""); do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigTh,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done
  fi

  if (( MODE == 1 )); then
    INPUT="results-phase2-proj"; OUTPUT="${DIR}/plots-phase2-proj"; for M in A1_5D A1_5P K2 L1 K2Inv K2InvWidth; do mkdir -p "${OUTPUT}/${M}"; for W in prefit_asimov; do for S in S1 S2 S2NF; do for LUMI in $(./getLumis.py ${M} ${S} "_phase2"); do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigInc.${P}.root:Freeze Sig. Inc.:28\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigInc,SigAcc,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    INPUT="results-proj"; OUTPUT="${DIR}/plots-run2-proj"; for M in A1_5D A1_5P K2 L1 K2Inv K2InvWidth; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S1 S2 S2NF; do for LUMI in $(./getLumis.py ${M} ${S} ""); do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigInc.${P}.root:Freeze Sig. Inc.:28\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigInc,SigAcc,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    ## Recovery for mu_ttH 300 fb-1 S2
    INPUT="results-proj"; OUTPUT="${DIR}/plots-run2-proj"; for M in A1_5P; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S2; do for LUMI in 300; do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in mu_XS_ttHtH; do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigInc.${P}.root:Freeze Sig. Inc.:28\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigInc,SigAcc,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --remove-near-min 2.5 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done
  fi

  if (( $MODE == 2 )); then
    INPUT="results-phase2-proj"; OUTPUT="${DIR}/plots-phase2-proj"; for M in A1_5D A1_5P A1_5PD; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S1 S2; do for LUMI in 3000; do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigAcc,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigInc.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    INPUT="results-proj"; OUTPUT="${DIR}/plots-run2-proj"; for M in A1_5D A1_5P; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S1 S2; do for LUMI in 300; do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigAcc,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigInc.${P}.root --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    ## Recovery for mu_ttH 300 fb-1 S2
    INPUT="results-proj"; OUTPUT="${DIR}/plots-run2-proj"; for M in A1_5P; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S2; do for LUMI in 300; do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in mu_XS_ttHtH; do eval python scripts/plot1DScan.py -o scan_full_split_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --others \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigTheory.${P}.root:Freeze Sig. Th.:2\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.allTheory.${P}.root:Freeze Bkg.Th.+Sig.Th.:9\" \"${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.all.${P}.root:Freeze Exp.+Bkg.Th.+Sig.Th.:8\" --breakdown "SigAcc,BkgTh,Exp,Stat" --json ${OUTPUT}/${W}_${S}_${LUMI}.json --translate pois.json --meta "Types:${W},Scans:full_split,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.fr.sigInc.${P}.root --remove-near-min 2.5 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done
  fi

  if (( $MODE < 2 )); then
    INPUT="results-phase2-proj"; OUTPUT="${DIR}/plots-phase2-proj"; for M in K2Inv; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S1 S2 S2NF; do for LUMI in $(./getLumis.py ${M} ${S} "_phase2"); do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_limit_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --json ${OUTPUT}/${W}_${S}_${LUMI}_limit.json --translate pois.json --meta "Types:${W},Scans:limit,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --upper-cl 0.95  --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done

    INPUT="results-proj"; OUTPUT="${DIR}/plots-run2-proj"; for M in K2Inv; do mkdir -p ${OUTPUT}/${M}; for W in prefit_asimov; do for S in S1 S2 S2NF; do for LUMI in $(./getLumis.py ${M} ${S} ""); do COL=1; case ${W} in prefit_asimov) COL=4; EXTRA='--main-label "SM Expected" --main-color 4';; postfit_asimov) COL=2; EXTRA='--main-label "SM Expected" --main-color 2';; *) EXTRA="";; esac; for P in $(./getPOIs_hmm.py ${M} -P); do eval python scripts/plot1DScan.py -o scan_limit_proj_${S}_${LUMI}_${W}_${M}_${P} --POI ${P} --model ${M} --json ${OUTPUT}/${W}_${S}_${LUMI}_limit.json --translate pois.json --meta "Types:${W},Scans:limit,POIs:${P},Lumi:${LUMI/./p},Scenario:${S}" -m ${INPUT}/scan.proj.${S}.${LUMI}.${M}.${W}.nominal.${P}.root --upper-cl 0.95 --remove-near-min 0.8 --y-max 15 --chop 15 ${EXTRA} --no-input-label --no-input-label --outdir ${OUTPUT}/${M}; done; done; done; done; done
  fi

fi

if (( $OPTMIN <= 2 && $OPTMAX >= 2 )); then
  mkdir -p ${DIR}/mixed; cp ${DIR}/plots-run2-proj/*35.9.json ${DIR}/mixed/; cp ${DIR}/plots-run2-proj/*100.json ${DIR}/mixed/; cp ${DIR}/plots-run2-proj/*300.json ${DIR}/mixed/; cp ${DIR}/plots-phase2-proj/*1000.json ${DIR}/mixed/; cp ${DIR}/plots-phase2-proj/*3000.json ${DIR}/mixed/


  mkdir -p ${DIR}/mixed/summary-plots

  if (( $MODE == 0 )); then
    OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P K2 L1 K2Inv K2InvWidth; do XMAX=$(case ${M} in A1_5D) echo "0.45";; A1_5P) echo "0.35";; K2) echo "0.23";; L1) echo "0.23";; K2Inv*) echo "0.23";; esac); case ${M} in K2) ELABEL="B_{BSM} = 0";; *) ELABEL="";; esac; POIS=$(case ${M} in A1_5D) echo "mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu";; A1_5P) echo "mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH";; K2) echo "kappa_gam,kappa_W,kappa_Z,kappa_g,kappa_t,kappa_b,kappa_tau,kappa_mu";; L1) echo "kappa_gZ,lambda_gamZ,lambda_WZ,lambda_Zg,lambda_tg,lambda_bZ,lambda_tauZ,lambda_muZ";; K2Inv) echo "BRinv";; K2InvWidth) echo "c7_Gscal_tot";; esac); python scripts/makeProjSummaryTable.py --model ${M} --translate texName.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output paper_table_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigTh,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown --extra-label "${ELABEL}" --height 650; mv summary_${M}_*.p* ${OUTPUT}/summary-plots/; mv paper_table_${M}.tex ${OUTPUT}/summary-plots/; done

    OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P; do XMAX=$(case ${M} in A1_5D) echo "0.45";; A1_5P) echo "0.35";; K2) echo "0.23";; L1) echo "0.23";; K2Inv*) echo "0.23";; esac); case ${M} in K2) ELABEL="B_{BSM} = 0";; *) ELABEL="";; esac; POIS=$(case ${M} in A1_5D) echo "mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu";; A1_5P) echo "mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH";; K2) echo "kappa_gam,kappa_W,kappa_Z,kappa_g,kappa_t,kappa_b,kappa_tau,kappa_mu";; L1) echo "kappa_gZ,lambda_gamZ,lambda_WZ,lambda_Zg,lambda_tg,lambda_bZ,lambda_tauZ,lambda_muZ";; K2Inv) echo "BRinv";; K2InvWidth) echo "c7_Gscal_tot";; esac); python scripts/makeProjSummaryTable.py --lumis 3000 --model ${M} --translate texName.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output twiki_table_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigTh,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown --extra-label "${ELABEL}" --height 650; mv twiki_table_${M}.tex ${OUTPUT}/summary-plots/; done

    OUTPUT="${DIR}/mixed"; for M in A1_5PD; do XMAX=2.0; POIS="mu_XS_ggFbbH_BR_gamgam,mu_XS_ggFbbH_BR_ZZ,mu_XS_ggFbbH_BR_WW,mu_XS_ggFbbH_BR_tautau,mu_XS_ggFbbH_BR_bb,mu_XS_ggFbbH_BR_mumu,mu_XS_VBF_BR_gamgam,mu_XS_VBF_BR_ZZ,mu_XS_VBF_BR_WW,mu_XS_VBF_BR_tautau,mu_XS_VBF_BR_mumu,mu_XS_WH_BR_gamgam,mu_XS_WH_BR_ZZ,mu_XS_WH_BR_WW,mu_XS_WH_BR_bb,mu_XS_ZH_BR_gamgam,mu_XS_ZH_BR_ZZ,mu_XS_ZH_BR_WW,mu_XS_ZH_BR_bb,mu_XS_ttHtH_BR_gamgam,mu_XS_ttHtH_BR_ZZ,mu_XS_ttHtH_BR_WW,mu_XS_ttHtH_BR_bb,mu_XS_ttHtH_BR_tautau"; python scripts/makeProjSummaryTable.py  --lumis 3000 --model ${M} --translate texName.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output paper_table_noinc_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigTh,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown; mv twiki_table_${M}.tex ${OUTPUT}/summary-plots/; done
  fi

  if (( $MODE == 1 )); then
    OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P K2 L1; do XMAX=$(case ${M} in A1_5D) echo "0.45";; A1_5P) echo "0.35";; K2) echo "0.23";; L1) echo "0.23";; esac); POIS=$(case ${M} in A1_5D) echo "mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu";; A1_5P) echo "mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH";; K2) echo "kappa_gam,kappa_W,kappa_Z,kappa_g,kappa_t,kappa_b,kappa_tau,kappa_mu";; L1) echo "kappa_gZ,lambda_gamZ,lambda_WZ,lambda_Zg,lambda_tg,lambda_bZ,lambda_tauZ,lambda_muZ";; esac); python scripts/makeProjSummaryTable.py --model ${M} --translate texName.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output paper_table_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigInc,SigAcc,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown; mv summary_${M}_*.p* ${OUTPUT}/summary-plots/; mv paper_table_${M}.tex ${OUTPUT}/summary-plots/; done
  fi

  if (( $MODE == 2 )); then
    OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P; do XMAX=$(case ${M} in A1_5D) echo "0.45";; A1_5P) echo "0.35";; K2) echo "0.23";; L1) echo "0.23";; esac); POIS=$(case ${M} in A1_5D) echo "mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu";; A1_5P) echo "mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH";; esac); python scripts/makeProjSummaryTable.py --model ${M} --translate texNameAbs.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output paper_table_abs_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigAcc,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown --convert-to-abs sm_vals.json; mv summary_${M}_*.p* ${OUTPUT}/summary-plots/; mv paper_table_abs_${M}.tex ${OUTPUT}/summary-plots/; done

    OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P; do XMAX=$(case ${M} in A1_5D) echo "0.45";; A1_5P) echo "0.35";; K2) echo "0.23";; L1) echo "0.23";; esac); POIS=$(case ${M} in A1_5D) echo "mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu";; A1_5P) echo "mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH";; esac); python scripts/makeProjSummaryTable.py --lumis 3000 --model ${M} --translate texName.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output paper_table_noinc_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigAcc,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown; mv summary_${M}_*.p* ${OUTPUT}/summary-plots/; mv paper_table_noinc_${M}.tex ${OUTPUT}/summary-plots/; done

    OUTPUT="${DIR}/mixed"; for M in A1_5PD; do XMAX=2.0; POIS="mu_XS_ggFbbH_BR_gamgam,mu_XS_ggFbbH_BR_ZZ,mu_XS_ggFbbH_BR_WW,mu_XS_ggFbbH_BR_tautau,mu_XS_ggFbbH_BR_bb,mu_XS_ggFbbH_BR_mumu,mu_XS_VBF_BR_gamgam,mu_XS_VBF_BR_ZZ,mu_XS_VBF_BR_WW,mu_XS_VBF_BR_tautau,mu_XS_VBF_BR_mumu,mu_XS_WH_BR_gamgam,mu_XS_WH_BR_ZZ,mu_XS_WH_BR_WW,mu_XS_WH_BR_bb,mu_XS_ZH_BR_gamgam,mu_XS_ZH_BR_ZZ,mu_XS_ZH_BR_WW,mu_XS_ZH_BR_bb,mu_XS_ttHtH_BR_gamgam,mu_XS_ttHtH_BR_ZZ,mu_XS_ttHtH_BR_WW,mu_XS_ttHtH_BR_bb,mu_XS_ttHtH_BR_tautau"; python scripts/makeProjSummaryTable.py  --lumis 3000 --model ${M} --translate texName.json --x-range 0,${XMAX} --translate-root pois.json --POIs ${POIS} --indir ${OUTPUT} --output paper_table_noinc_${M}.tex --scenarios S1,S2 --breakdown "Stat,SigAcc,BkgTh,Exp" --sync-stat --handle-zero-in-breakdown; mv summary_${M}_*.p* ${OUTPUT}/summary-plots/; mv paper_table_noinc_${M}.tex ${OUTPUT}/summary-plots/; done
  fi

fi


if (( $OPTMIN <= 3 && $OPTMAX >= 3 )); then
mkdir ${DIR}/mixed/poi-evolution

if (( $MODE == 0 )); then
  OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P K2 K2Inv K2InvWidth L1; do YMAX=$(case ${M} in A1_5D) echo "0.3";; A1_5P) echo "0.3";; K2) echo "0.25";; K2Inv) echo "0.25";; K2InvWidth) echo "0.25";; L1) echo "0.23";; esac); for S in S1 S2; do python scripts/plotPOIEvolution.py --json-files "${OUTPUT}/prefit_asimov_${S}_%(LUMI)s.json" --translate pois.json --model ${M} --y-max ${YMAX} --scenario ${S} --show "Total,Stat,SigTh,BkgTh,Exp" --fix-fluctuations; mv ${S}_*_evolution.p* ${OUTPUT}/poi-evolution/; done; done
fi


if (( $MODE == 1 )); then
  OUTPUT="${DIR}/mixed"; for M in A1_5D A1_5P K2; do YMAX=$(case ${M} in A1_5D) echo "0.3";; A1_5P) echo "0.3";; K2) echo "0.25";; esac); for S in S1 S2; do python scripts/plotPOIEvolution.py --json-files "${OUTPUT}/prefit_asimov_${S}_%(LUMI)s.json" --translate pois.json --model ${M} --y-max ${YMAX} --scenario ${S} --show "Total,Stat,SigInc,SigAcc,BkgTh,Exp" --fix-fluctuations; mv ${S}_*_evolution.p* ${OUTPUT}/poi-evolution/; done; done
fi
fi


if (( $OPTMIN <= 4 && $OPTMAX >= 4 )); then
  mkdir -p ${DIR}/mixed/correlations

  OUTPUT="${DIR}/mixed"; M=A1_5D; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.root:fit_mdf --POIs mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations/; done; done

  OUTPUT="${DIR}/mixed"; M=A1_5P; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.root:fit_mdf --POIs mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations/; done; done

  OUTPUT="${DIR}/mixed"; M=K2; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.root:fit_mdf --POIs kappa_gam,kappa_W,kappa_Z,kappa_g,kappa_t,kappa_b,kappa_tau,kappa_mu -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations/; done; done

  OUTPUT="${DIR}/mixed"; M=L1; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.root:fit_mdf --POIs kappa_gZ,lambda_gamZ,lambda_WZ,lambda_Zg,lambda_tg,lambda_bZ,lambda_tauZ,lambda_muZ -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations/; done; done
fi

if (( OPTMIN <= 5 && OPTMAX >= 5 )); then
  mkdir -p "${DIR}/mixed/correlations-stat-only"

  OUTPUT="${DIR}/mixed"; M=A1_5D; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.fr.all.root:fit_mdf --POIs mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations-stat-only/; done; done

  OUTPUT="${DIR}/mixed"; M=A1_5P; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.fr.all.root:fit_mdf --POIs mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations-stat-only/; done; done

  OUTPUT="${DIR}/mixed"; M=K2; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S1 S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.fr.all.root:fit_mdf --POIs kappa_gam,kappa_W,kappa_Z,kappa_g,kappa_t,kappa_b,kappa_tau,kappa_mu -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations-stat-only/; done; done

  mkdir -p "${DIR}/mixed/correlations-no-sig-inc"

  OUTPUT="${DIR}/mixed"; M=A1_5D; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.fr.sigInc.root:fit_mdf --POIs mu_BR_gamgam,mu_BR_WW,mu_BR_ZZ,mu_BR_bb,mu_BR_tautau,mu_BR_mumu -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations-no-sig-inc/; done; done

  OUTPUT="${DIR}/mixed"; M=A1_5P; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.fr.sigInc.root:fit_mdf --POIs mu_XS_ggFbbH,mu_XS_VBF,mu_XS_WH,mu_XS_ZH,mu_XS_ttHtH -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations-no-sig-inc/; done; done

  OUTPUT="${DIR}/mixed"; M=K2; for LUMI in 35.9 300 3000; do VARIANT=$(case ${LUMI} in 3000) echo "_phase2";; *) echo "";; esac); for S in S2; do python scripts/plotCovMatrixFromFitResult.py -i results-proj/multidimfit_approxFit_prefit_asimov.proj${VARIANT}.${S}.${LUMI}.${M}.fr.sigInc.root:fit_mdf --POIs kappa_gam,kappa_W,kappa_Z,kappa_g,kappa_t,kappa_b,kappa_tau,kappa_mu -o correlations_${M}_${S}_${LUMI} --translate pois.json --label-size 0.10 --label "${LUMI} fb^{-1} (13 TeV)" --subline Projection; mv correlations_${M}_${S}_${LUMI}.p* ${OUTPUT}/correlations-no-sig-inc/; done; done

fi
